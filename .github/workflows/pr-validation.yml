name: PR Validation

on:
  pull_request:
    branches: [ main, dev, develop ]
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  # 快速验证构建和测试
  validate:
    name: 🔍 Validate PR
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于更好的分析
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore WorkTimeTracker.sln
      
    - name: 🔨 Build solution
      run: dotnet build WorkTimeTracker.sln --configuration Debug --no-restore
      
    - name: 🧪 Run unit tests
      run: |
        dotnet test WorkTimeTracker.Tests/WorkTimeTracker.Tests.csproj \
          --configuration Debug \
          --no-build \
          --verbosity normal \
          --logger "console;verbosity=detailed"
          
    - name: 🔍 Check code formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
        
    - name: 📊 Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const output = `## 🔍 PR 验证结果
          
          - ✅ 代码检出: 成功
          - ✅ .NET 环境: ${{ env.DOTNET_VERSION }}
          - ✅ 依赖还原: 完成
          - ✅ 项目构建: 通过
          - ✅ 单元测试: 通过
          - ✅ 代码格式: 检查完成
          
          **构建时间**: ${new Date().toLocaleString()}
          **提交哈希**: ${{ github.event.pull_request.head.sha }}
          **分支**: ${{ github.event.pull_request.head.ref }}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # 代码质量检查
  code-analysis:
    name: 📋 Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore WorkTimeTracker.sln
      
    - name: 🔍 Run static analysis
      run: |
        dotnet build WorkTimeTracker.sln \
          --configuration Debug \
          --no-restore \
          /p:TreatWarningsAsErrors=false \
          /p:RunAnalyzersDuringBuild=true \
          /p:EnableNETAnalyzers=true
          
    - name: 📏 Check code metrics
      run: |
        echo "📊 代码复杂度分析..."
        find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" | wc -l > code-metrics.txt
        echo "C# 文件总数: $(cat code-metrics.txt)" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔐 Security scan
      run: |
        echo "🔐 安全性扫描..."
        dotnet list package --vulnerable --include-transitive || true
        
  # 变更影响分析
  change-analysis:
    name: 📈 Change Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📊 Analyze changes
      run: |
        echo "## 📈 变更分析" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 统计文件变更
        CHANGED_FILES=$(git diff --name-only origin/main..HEAD | wc -l)
        echo "**变更文件数**: $CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
        
        # 统计代码行变更
        LINES_ADDED=$(git diff --numstat origin/main..HEAD | awk '{sum+=$1} END {print sum}')
        LINES_DELETED=$(git diff --numstat origin/main..HEAD | awk '{sum+=$2} END {print sum}')
        echo "**新增行数**: ${LINES_ADDED:-0}" >> $GITHUB_STEP_SUMMARY
        echo "**删除行数**: ${LINES_DELETED:-0}" >> $GITHUB_STEP_SUMMARY
        
        # 文件类型统计
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 变更文件类型" >> $GITHUB_STEP_SUMMARY
        git diff --name-only origin/main..HEAD | sed 's/.*\.//' | sort | uniq -c | sort -nr >> $GITHUB_STEP_SUMMARY
        
        # 变更的项目
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 影响的项目" >> $GITHUB_STEP_SUMMARY
        git diff --name-only origin/main..HEAD | grep -E '\.(cs|csproj|xaml)$' | cut -d'/' -f1 | sort | uniq >> $GITHUB_STEP_SUMMARY
